{"version":3,"sources":["components/HostsGame.js","components/PlayersGame.js","components/GenericButton.js","components/CreateNameScreen.js","logic/api.js","components/NumberPad.js","components/JoinScreen.js","components/StartButton.js","components/HostScreen.js","components/StartScreen.js","App.js","serviceWorker.js","index.js"],"names":["HostsGame","props","useEffect","console","log","buzzes","map","buzz","key","PlayersGame","GenericButton","className","styles","genericButt","onClick","handleClick","text","CreateNameScreen","onChange","updateName","joinWithName","apiGet","path","a","fetch","res","json","data","alert","apiPost","object","options","method","body","JSON","stringify","headers","NumberPad","buttonClick","e","num","target","value","enteredCode","length","setEnteredCode","name","rm","slice","join","role","aria-label","JoinScreen","useState","userName","setUserName","createNameScreen","setCreateNameScreen","code","ok","setJoinedGame","player","setPlayerName","setGameCode","joinRoom","msg","goBack","StartButton","HostScreen","playersList","el","gameCode","beginHost","StartScreen","createGame","sock","io","UserContext","React","createContext","App","startScreen","setStartScreen","joinScreen","setJoinScreen","hostScreen","setHostScreen","joinedGame","playerName","setHostGamePlayers","setPlayersList","showHostsGame","setShowHostsGame","showPlayersGame","buzzName","setBuzzName","setBuzzes","on","obj","arr","i","players","push","includes","emit","endGame","gameNumber","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.151c4a1f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { sock } from '../App';\n\nexport default function HostsGame(props) {\n  useEffect(() => {\n    console.log(props.buzzes);\n  });\n  const buzzes = props.buzzes.map((buzz) => {\n    return <li key={buzz}>{buzz}</li>;\n  });\n  return (\n    <div>\n      <ol>{buzzes}</ol>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function PlayersGame(props) {\n  return (\n    <div>\n      <div>bObObO</div>\n    </div>\n  );\n}\n","import React from 'react';\nimport styles from '../App.css';\n\nexport default function GenericButton(props) {\n  const handleClick = () => {\n    props.handleClick();\n  };\n  return (\n    <button className={styles.genericButt} onClick={handleClick}>\n      {props.text}\n    </button>\n  );\n}\n","import React from 'react';\nimport GenericButton from './GenericButton';\n\nexport default function CreateNameScreen(props) {\n  return (\n    <div>\n      <input onChange={props.updateName}></input>\n      <GenericButton text={'Join'} handleClick={props.joinWithName} />\n    </div>\n  );\n}\n","const apiGet = async (path) => {\n  try {\n    const res = await fetch(path);\n    const data = await res.json();\n    return data;\n  } catch (err) {\n    alert(err);\n    return null;\n  }\n};\n\n/**\n *\n * @param {string} path - path to post to\n * @param {Object} object - object literal to post\n */\nconst apiPost = async (path, object) => {\n  try {\n    const options = {\n      method: 'post',\n      body: JSON.stringify(object),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await fetch(path, options);\n    const data = await res.json();\n    return data;\n  } catch (err) {\n    return null;\n  }\n};\n\nexport { apiGet, apiPost };\n","import React from 'react';\n\nexport default function NumberPad(props) {\n  const buttonClick = (e) => {\n    let num = e.target.value;\n    if (num && props.enteredCode.length < 6) {\n      props.setEnteredCode(`${props.enteredCode}${num}`);\n    } else if (num && props.enteredCode >= 6) {\n    } else if (e.target.name === 'back') {\n      let rm = props.enteredCode.slice(0, -1);\n      props.setEnteredCode(rm);\n    } else {\n      props.enteredCode.length === 6 ? props.join(props.enteredCode) : alert('You must enter at least 6 numbers❣️✨');\n    }\n  };\n  return (\n    <div>\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <button onClick={buttonClick} value={1}>\n                1\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick} value={2}>\n                2\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick} value={3}>\n                3\n              </button>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={buttonClick} value={4}>\n                4\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick} value={5}>\n                5\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick} value={6}>\n                6\n              </button>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={buttonClick} value={7}>\n                7\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick} value={8}>\n                8\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick} value={9}>\n                9\n              </button>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <button onClick={buttonClick} name={'back'}>\n                <span role=\"img\" aria-label=\"BACK\">\n                  ⬅\n                </span>\n                BACK\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick} value={0}>\n                0\n              </button>\n            </td>\n            <td>\n              <button onClick={buttonClick}>\n                <span role=\"img\" aria-label=\"Go!\">\n                  🆗\n                </span>\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport GenericButton from './GenericButton';\nimport CreateNameScreen from './CreateNameScreen';\nimport { apiPost } from '../logic/api';\nimport NumberPad from './NumberPad';\n\nexport default function JoinScreen(props) {\n  const [enteredCode, setEnteredCode] = useState('');\n  const [userName, setUserName] = useState(null);\n  const [createNameScreen, setCreateNameScreen] = useState(false);\n\n  const updateName = (e) => {\n    setUserName(e.target.value);\n  };\n  const join = async (code) => {\n    const res = await apiPost('/join', { code: code });\n    if (res.ok) {\n      props.setJoinedGame(enteredCode);\n      setCreateNameScreen(true);\n    } else {\n      alert('That game is not currently available 😭');\n    }\n  };\n  const joinWithName = async () => {\n    const res = await apiPost('/add-player', { player: userName, code: enteredCode });\n    console.log(res);\n    if (res.ok) {\n      console.log('It worked!');\n      props.setPlayerName(userName);\n      props.setGameCode(enteredCode);\n      props.joinRoom(enteredCode, userName);\n    } else {\n      if ((res.msg = 'used')) {\n        alert('Sorry, that name is already used. Please choose a new one❣️✨');\n      } else {\n        alert('Sorry, the game you are trying to play no longer seems to be available. Please try again.✨');\n      }\n    }\n  };\n  return (\n    <div>\n      <div>{enteredCode}</div>\n      <GenericButton text={'⏪Back'} handleClick={props.goBack} />\n      {!createNameScreen && <NumberPad enteredCode={enteredCode} setEnteredCode={setEnteredCode} join={join} />}\n      {createNameScreen && <CreateNameScreen updateName={updateName} joinWithName={joinWithName} />}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function StartButton(props) {\n  return <button onClick={props.handleClick}>{props.text}</button>;\n}\n","import React from 'react';\nimport GenericButton from './GenericButton';\nimport StartButton from './StartButton';\n\nexport default function HostScreen(props) {\n  const playersList = props.playersList.map((el) => {\n    return <li key={el}>{el}</li>;\n  });\n\n  return (\n    <div>\n      <GenericButton text={'⏪Back'} handleClick={props.goBack} />\n      <div>{props.gameCode}</div>\n      <ul>{playersList}</ul>\n      <StartButton handleClick={props.beginHost} text={'START GAME✨'} />\n    </div>\n  );\n}\n","import React from 'react';\nimport StartButton from './StartButton';\n\nexport default function StartScreen(props) {\n  return (\n    <div>\n      <StartButton text={'Host game ✨'} handleClick={props.createGame} />\n      <StartButton text={'Join game　🎮'} handleClick={props.join} />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport HostsGame from './components/HostsGame';\nimport PlayersGame from './components/PlayersGame';\nimport JoinScreen from './components/JoinScreen';\nimport HostScreen from './components/HostScreen';\nimport StartScreen from './components/StartScreen';\nimport { apiGet, apiPost } from './logic/api.js';\nimport './App.css';\nimport io from 'socket.io-client';\n\nconst sock = io('/games');\n\nexport { sock };\n\nexport const UserContext = React.createContext();\n\nfunction App() {\n  const [gameCode, setGameCode] = useState(null);\n  const [startScreen, setStartScreen] = useState(true);\n  const [joinScreen, setJoinScreen] = useState(false);\n  const [hostScreen, setHostScreen] = useState(false);\n  const [joinedGame, setJoinedGame] = useState(null);\n  const [playerName, setPlayerName] = useState(null);\n  const [hostGamePlayers, setHostGamePlayers] = useState([]); //all player data\n  const [playersList, setPlayersList] = useState([]); // just usernames\n  const [showHostsGame, setShowHostsGame] = useState(false);\n  const [showPlayersGame, setShowPlayersGame] = useState(false);\n  const [buzzName, setBuzzName] = useState(null); // player who most recently buzzed\n  const [buzzes, setBuzzes] = useState([]);\n\n  useEffect(() => {\n    sock.on('newPlayer', (obj) => {\n      console.log(obj);\n      const arr = [];\n      for (let i = 0; i < obj.players.length; i++) {\n        arr.push(obj.players[i].name);\n      }\n      setPlayersList(arr);\n      console.log(arr);\n      setHostGamePlayers(obj.players);\n    });\n    sock.on('buzz', (name) => {\n      setBuzzName(name);\n    });\n    sock.on('start', () => {\n      //what to do when host starts a game\n      console.log('game started');\n    });\n  }, [sock]);\n\n  useEffect(() => {\n    if (!buzzes.includes(buzzName) && buzzName) {\n      setBuzzes((buzzes) => [...buzzes, buzzName]); // Push into state!\n    }\n  }, [buzzName]);\n\n  const joinRoom = (num) => {\n    sock.emit('join', `/${num}`);\n  };\n  const buzz = () => {\n    sock.emit('buzz', playerName, gameCode);\n  };\n\n  const goBack = () => {\n    setStartScreen(true);\n    setHostScreen(false);\n    setJoinScreen(false);\n    if (joinedGame) {\n      endGame(joinedGame);\n      setJoinedGame(null);\n    }\n    if (gameCode) {\n      endGame(gameCode);\n      setGameCode(null);\n    }\n  };\n\n  const createGame = async () => {\n    const res = await apiGet('/create');\n    if (res) {\n      setGameCode(res.gameNumber);\n      setStartScreen(false);\n      setJoinScreen(false);\n      setHostScreen(true);\n      console.log(res.gameNumber);\n      joinRoom(res.gameNumber);\n    } else {\n      console.log('error!');\n    }\n  };\n\n  const join = () => {\n    setJoinScreen(true);\n    setHostScreen(false);\n    setStartScreen(false);\n  };\n  const endGame = async (code) => {\n    const res = await apiPost('/create', { code: code });\n    if (res) {\n      console.log(res);\n    } else {\n      console.log('error!');\n    }\n  };\n\n  const beginHost = () => {\n    console.log('HOSTIN');\n    setJoinScreen(false);\n    setHostScreen(false);\n    setStartScreen(false);\n    setShowHostsGame(true);\n    sock.emit('host', gameCode);\n  };\n  return (\n    <div className=\"App\">\n      <button onClick={buzz}>emit!</button>\n      <button\n        onClick={() => {\n          endGame(gameCode);\n        }}\n      >\n        End game\n      </button>\n      <UserContext.Provider value={{ player: playerName, gameCode: gameCode }}>\n        {startScreen && <StartScreen goBack={goBack} createGame={createGame} join={join} />}\n\n        {hostScreen && (\n          <HostScreen goBack={goBack} gameCode={gameCode} playersList={playersList} beginHost={beginHost} />\n        )}\n        {joinScreen && (\n          <JoinScreen\n            goBack={goBack}\n            setJoinedGame={setJoinedGame}\n            setGameCode={setGameCode}\n            setPlayerName={setPlayerName}\n            joinRoom={joinRoom}\n          />\n        )}\n        {showHostsGame && <HostsGame buzzes={buzzes} setBuzzes={setBuzzes} />}\n        {showPlayersGame && <PlayersGame />}\n      </UserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}